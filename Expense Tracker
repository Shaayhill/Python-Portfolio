import json
import datetime

# Initialize an empty list to store expense data
expenses = []

# Function to save expenses to a JSON file
def save_expenses():
    with open("expenses.json", "w") as file:
        json.dump(expenses, file)

# Function to load expenses from the JSON file
def load_expenses():
    try:
        with open("expenses.json", "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return []

# Function to display the main menu
def show_menu():
    print("Expense Tracker")
    print("1. Add Expense")
    print("2. View Expenses")
    print("3. Search Expenses")
    print("4. Exit")

# Function to add a new expense
def add_expense():
    amount = float(input("Enter the expense amount: "))
    description = input("Enter a short description: ")
    category = input("Enter expense category: ")
    date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    expense = {
        "amount": amount,
        "description": description,
        "category": category,
        "date": date
    }
    
    expenses.append(expense)
    save_expenses()
    print("Expense added successfully!")

# Function to view expenses
def view_expenses():
    print("\nExpense List:")
    for expense in expenses:
        print(f"Date: {expense['date']}")
        print(f"Amount: ${expense['amount']:.2f}")
        print(f"Description: {expense['description']}")
        print(f"Category: {expense['category']}")
        print("-" * 30)
    
    total = sum(expense['amount'] for expense in expenses)
    print(f"Total Expenses: ${total:.2f}\n")

# Function to search expenses by description
def search_expenses():
    search_term = input("Enter a search term: ").lower()
    search_results = [expense for expense in expenses if search_term in expense['description'].lower()]
    
    if search_results:
        print("\nSearch Results:")
        for expense in search_results:
            print(f"Date: {expense['date']}")
            print(f"Amount: ${expense['amount']:.2f}")
            print(f"Description: {expense['description']}")
            print(f"Category: {expense['category']}")
            print("-" * 30)
    else:
        print("No expenses found for the given search term.")

# Function to filter expenses by date range
def filter_expenses_by_date():
    try:
        start_date_str = input("Enter start date (YYYY-MM-DD): ")
        end_date_str = input("Enter end date (YYYY-MM-DD): ")
        
        start_date = datetime.datetime.strptime(start_date_str, "%Y-%m-%d")
        end_date = datetime.datetime.strptime(end_date_str, "%Y-%m-%d")
        
        filtered_expenses = [expense for expense in expenses if start_date <= datetime.datetime.strptime(expense['date'], "%Y-%m-%d %H:%M:%S") <= end_date]
        
        if filtered_expenses:
            print("\nExpenses within the specified date range:")
            for expense in filtered_expenses:
                print(f"Date: {expense['date']}")
                print(f"Amount: ${expense['amount']:.2f}")
                print(f"Description: {expense['description']}")
                print(f"Category: {expense['category']}")
                print("-" * 30)
        else:
            print("No expenses found within the specified date range.")
    except ValueError:
        print("Invalid date format. Please use YYYY-MM-DD.")

# Main program loop
expenses = load_expenses()

while True:
    show_menu()
    choice = input("Enter your choice: ")
    
    if choice == "1":
        add_expense()
    elif choice == "2":
        view_expenses()
    elif choice == "3":
        search_expenses()
    elif choice == "4":
        filter_expenses_by_date()
    elif choice == "5":
        print("Exiting Expense Tracker. Goodbye!")
        save_expenses()  # Save expenses before exiting
        break
    else:
        print("Invalid choice. Please try again.")
